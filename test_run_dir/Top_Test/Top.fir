;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<32>, out : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ProgramCounter.scala 19:22]
    io.out <= reg @[ProgramCounter.scala 20:12]
    reg <= io.in @[ProgramCounter.scala 21:9]
    
  module PC4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, out : UInt<32>}
    
    node _io_out_T = add(io.pc, UInt<32>("h04")) @[ProgramCounter.scala 11:21]
    node _io_out_T_1 = tail(_io_out_T, 1) @[ProgramCounter.scala 11:21]
    io.out <= _io_out_T_1 @[ProgramCounter.scala 11:12]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip ReadReg1 : UInt<5>, flip ReadReg2 : UInt<5>, flip RegWrite : UInt<1>, flip WriteReg : UInt<5>, flip WriteData : SInt<32>, ReadData1 : SInt<32>, ReadData2 : SInt<32>}
    
    wire _File_WIRE : SInt<32>[32] @[RegisterFile.scala 17:31]
    _File_WIRE[0] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[1] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[2] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[3] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[4] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[5] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[6] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[7] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[8] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[9] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[10] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[11] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[12] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[13] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[14] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[15] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[16] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[17] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[18] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[19] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[20] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[21] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[22] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[23] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[24] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[25] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[26] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[27] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[28] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[29] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[30] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    _File_WIRE[31] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 17:31]
    reg File : SInt<32>[32], clock with : (reset => (reset, _File_WIRE)) @[RegisterFile.scala 17:23]
    io.ReadData1 <= File[io.ReadReg1] @[RegisterFile.scala 20:18]
    io.ReadData2 <= File[io.ReadReg2] @[RegisterFile.scala 21:18]
    when io.RegWrite : @[RegisterFile.scala 23:22]
      File[io.WriteReg] <= io.WriteData @[RegisterFile.scala 24:27]
      skip @[RegisterFile.scala 23:22]
    File[0] <= asSInt(UInt<1>("h00")) @[RegisterFile.scala 26:13]
    
  module InstructionMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<32>, data : UInt<32>}
    
    cmem imem : UInt<32>[1024] @[InstructionMemory.scala 13:16]
    node _io_data_T = bits(io.address, 9, 0) @[InstructionMemory.scala 16:16]
    infer mport io_data_MPORT = imem[_io_data_T], clock @[InstructionMemory.scala 16:16]
    io.data <= io_data_MPORT @[InstructionMemory.scala 16:9]
    
  module ImmdValGen : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip PC : UInt<32>, immd_se : UInt<32>}
    
    node _T = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 15:19]
    node _T_1 = eq(_T, UInt<2>("h03")) @[ImmediateGenerator.scala 15:25]
    node _T_2 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 15:54]
    node _T_3 = eq(_T_2, UInt<4>("h0f")) @[ImmediateGenerator.scala 15:60]
    node _T_4 = or(_T_1, _T_3) @[ImmediateGenerator.scala 15:42]
    node _T_5 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 15:89]
    node _T_6 = eq(_T_5, UInt<5>("h013")) @[ImmediateGenerator.scala 15:95]
    node _T_7 = or(_T_4, _T_6) @[ImmediateGenerator.scala 15:77]
    node _T_8 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 15:124]
    node _T_9 = eq(_T_8, UInt<5>("h01b")) @[ImmediateGenerator.scala 15:130]
    node _T_10 = or(_T_7, _T_9) @[ImmediateGenerator.scala 15:112]
    node _T_11 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 15:159]
    node _T_12 = eq(_T_11, UInt<7>("h067")) @[ImmediateGenerator.scala 15:165]
    node _T_13 = or(_T_10, _T_12) @[ImmediateGenerator.scala 15:147]
    node _T_14 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 15:194]
    node _T_15 = eq(_T_14, UInt<7>("h073")) @[ImmediateGenerator.scala 15:200]
    node _T_16 = or(_T_13, _T_15) @[ImmediateGenerator.scala 15:182]
    when _T_16 : @[ImmediateGenerator.scala 15:217]
      node _io_immd_se_T = bits(io.instr, 31, 31) @[ImmediateGenerator.scala 16:44]
      node _io_immd_se_T_1 = bits(_io_immd_se_T, 0, 0) @[Bitwise.scala 72:15]
      node io_immd_se_hi = mux(_io_immd_se_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_immd_se_lo = bits(io.instr, 31, 20) @[ImmediateGenerator.scala 16:59]
      node _io_immd_se_T_2 = cat(io_immd_se_hi, io_immd_se_lo) @[Cat.scala 30:58]
      io.immd_se <= _io_immd_se_T_2 @[ImmediateGenerator.scala 16:20]
      skip @[ImmediateGenerator.scala 15:217]
    else : @[ImmediateGenerator.scala 20:84]
      node _T_17 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 20:25]
      node _T_18 = eq(_T_17, UInt<5>("h017")) @[ImmediateGenerator.scala 20:31]
      node _T_19 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 20:60]
      node _T_20 = eq(_T_19, UInt<6>("h037")) @[ImmediateGenerator.scala 20:66]
      node _T_21 = or(_T_18, _T_20) @[ImmediateGenerator.scala 20:48]
      when _T_21 : @[ImmediateGenerator.scala 20:84]
        node io_immd_se_hi_1 = bits(io.instr, 31, 12) @[ImmediateGenerator.scala 21:35]
        node io_immd_se_lo_1 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
        node _io_immd_se_T_3 = cat(io_immd_se_hi_1, io_immd_se_lo_1) @[Cat.scala 30:58]
        io.immd_se <= _io_immd_se_T_3 @[ImmediateGenerator.scala 21:20]
        skip @[ImmediateGenerator.scala 20:84]
      else : @[ImmediateGenerator.scala 24:46]
        node _T_22 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 24:24]
        node _T_23 = eq(_T_22, UInt<7>("h06f")) @[ImmediateGenerator.scala 24:30]
        when _T_23 : @[ImmediateGenerator.scala 24:46]
          node _io_immd_se_T_4 = bits(io.instr, 31, 31) @[ImmediateGenerator.scala 25:45]
          node _io_immd_se_T_5 = bits(_io_immd_se_T_4, 0, 0) @[Bitwise.scala 72:15]
          node io_immd_se_hi_hi_hi = mux(_io_immd_se_T_5, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
          node io_immd_se_hi_hi_lo = bits(io.instr, 31, 31) @[ImmediateGenerator.scala 25:60]
          node io_immd_se_hi_lo = bits(io.instr, 19, 12) @[ImmediateGenerator.scala 25:74]
          node io_immd_se_lo_hi_hi = bits(io.instr, 20, 20) @[ImmediateGenerator.scala 25:91]
          node io_immd_se_lo_hi_lo = bits(io.instr, 30, 21) @[ImmediateGenerator.scala 25:105]
          node io_immd_se_lo_hi = cat(io_immd_se_lo_hi_hi, io_immd_se_lo_hi_lo) @[Cat.scala 30:58]
          node io_immd_se_lo_2 = cat(io_immd_se_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
          node io_immd_se_hi_hi = cat(io_immd_se_hi_hi_hi, io_immd_se_hi_hi_lo) @[Cat.scala 30:58]
          node io_immd_se_hi_2 = cat(io_immd_se_hi_hi, io_immd_se_hi_lo) @[Cat.scala 30:58]
          node _io_immd_se_T_6 = cat(io_immd_se_hi_2, io_immd_se_lo_2) @[Cat.scala 30:58]
          node _io_immd_se_T_7 = add(_io_immd_se_T_6, io.PC) @[ImmediateGenerator.scala 25:120]
          node _io_immd_se_T_8 = tail(_io_immd_se_T_7, 1) @[ImmediateGenerator.scala 25:120]
          io.immd_se <= _io_immd_se_T_8 @[ImmediateGenerator.scala 25:20]
          skip @[ImmediateGenerator.scala 24:46]
        else : @[ImmediateGenerator.scala 28:46]
          node _T_24 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 28:24]
          node _T_25 = eq(_T_24, UInt<6>("h023")) @[ImmediateGenerator.scala 28:30]
          when _T_25 : @[ImmediateGenerator.scala 28:46]
            node _io_immd_se_T_9 = bits(io.instr, 31, 31) @[ImmediateGenerator.scala 29:44]
            node _io_immd_se_T_10 = bits(_io_immd_se_T_9, 0, 0) @[Bitwise.scala 72:15]
            node io_immd_se_hi_hi_1 = mux(_io_immd_se_T_10, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
            node io_immd_se_hi_lo_1 = bits(io.instr, 31, 25) @[ImmediateGenerator.scala 29:59]
            node io_immd_se_lo_3 = bits(io.instr, 11, 7) @[ImmediateGenerator.scala 29:76]
            node io_immd_se_hi_3 = cat(io_immd_se_hi_hi_1, io_immd_se_hi_lo_1) @[Cat.scala 30:58]
            node _io_immd_se_T_11 = cat(io_immd_se_hi_3, io_immd_se_lo_3) @[Cat.scala 30:58]
            io.immd_se <= _io_immd_se_T_11 @[ImmediateGenerator.scala 29:20]
            skip @[ImmediateGenerator.scala 28:46]
          else : @[ImmediateGenerator.scala 33:46]
            node _T_26 = bits(io.instr, 6, 0) @[ImmediateGenerator.scala 33:24]
            node _T_27 = eq(_T_26, UInt<7>("h063")) @[ImmediateGenerator.scala 33:30]
            when _T_27 : @[ImmediateGenerator.scala 33:46]
              node _io_immd_se_T_12 = bits(io.instr, 31, 31) @[ImmediateGenerator.scala 34:45]
              node _io_immd_se_T_13 = bits(_io_immd_se_T_12, 0, 0) @[Bitwise.scala 72:15]
              node io_immd_se_hi_hi_hi_1 = mux(_io_immd_se_T_13, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
              node io_immd_se_hi_hi_lo_1 = bits(io.instr, 31, 31) @[ImmediateGenerator.scala 34:60]
              node io_immd_se_hi_lo_2 = bits(io.instr, 7, 7) @[ImmediateGenerator.scala 34:74]
              node io_immd_se_lo_hi_hi_1 = bits(io.instr, 30, 25) @[ImmediateGenerator.scala 34:87]
              node io_immd_se_lo_hi_lo_1 = bits(io.instr, 11, 8) @[ImmediateGenerator.scala 34:104]
              node io_immd_se_lo_hi_1 = cat(io_immd_se_lo_hi_hi_1, io_immd_se_lo_hi_lo_1) @[Cat.scala 30:58]
              node io_immd_se_lo_4 = cat(io_immd_se_lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
              node io_immd_se_hi_hi_2 = cat(io_immd_se_hi_hi_hi_1, io_immd_se_hi_hi_lo_1) @[Cat.scala 30:58]
              node io_immd_se_hi_4 = cat(io_immd_se_hi_hi_2, io_immd_se_hi_lo_2) @[Cat.scala 30:58]
              node _io_immd_se_T_14 = cat(io_immd_se_hi_4, io_immd_se_lo_4) @[Cat.scala 30:58]
              node _io_immd_se_T_15 = add(_io_immd_se_T_14, io.PC) @[ImmediateGenerator.scala 34:118]
              node _io_immd_se_T_16 = tail(_io_immd_se_T_15, 1) @[ImmediateGenerator.scala 34:118]
              io.immd_se <= _io_immd_se_T_16 @[ImmediateGenerator.scala 34:20]
              skip @[ImmediateGenerator.scala 33:46]
            else : @[ImmediateGenerator.scala 36:16]
              io.immd_se is invalid @[ImmediateGenerator.scala 37:20]
              skip @[ImmediateGenerator.scala 36:16]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<32>, flip data : SInt<32>, flip write : UInt<1>, flip read : UInt<1>, outputData : SInt<32>}
    
    cmem memory : SInt<32>[1024] @[DataMemory.scala 15:19]
    when io.write : @[DataMemory.scala 17:18]
      node _T = bits(io.address, 9, 0)
      write mport MPORT = memory[_T], clock
      MPORT <= io.data
      skip @[DataMemory.scala 17:18]
    when io.read : @[DataMemory.scala 21:17]
      node _io_outputData_T = bits(io.address, 9, 0) @[DataMemory.scala 22:33]
      read mport io_outputData_MPORT = memory[_io_outputData_T], clock @[DataMemory.scala 22:33]
      io.outputData <= io_outputData_MPORT @[DataMemory.scala 22:19]
      skip @[DataMemory.scala 21:17]
    else : @[DataMemory.scala 24:15]
      io.outputData is invalid @[DataMemory.scala 25:19]
      skip @[DataMemory.scala 24:15]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, MemWrite : UInt<1>, Branch : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemToReg : UInt<1>, ALU_op : UInt<3>, operand_A_sel : UInt<2>, operand_B_sel : UInt<1>, Extend_sel : UInt<2>, Next_PC_select : UInt<2>}
    
    node _T = eq(io.opcode, UInt<2>("h03")) @[Control.scala 21:20]
    when _T : @[Control.scala 21:37]
      io.MemWrite <= UInt<1>("h00") @[Control.scala 22:21]
      io.Branch <= UInt<1>("h00") @[Control.scala 23:19]
      io.MemRead <= UInt<1>("h01") @[Control.scala 24:20]
      io.RegWrite <= UInt<1>("h01") @[Control.scala 25:21]
      io.MemToReg <= UInt<1>("h01") @[Control.scala 26:21]
      io.ALU_op <= UInt<3>("h04") @[Control.scala 27:19]
      io.operand_A_sel <= UInt<1>("h00") @[Control.scala 28:26]
      io.operand_B_sel <= UInt<1>("h01") @[Control.scala 29:26]
      io.Extend_sel <= UInt<1>("h00") @[Control.scala 30:23]
      io.Next_PC_select <= UInt<1>("h00") @[Control.scala 31:27]
      skip @[Control.scala 21:37]
    else : @[Control.scala 33:172]
      node _T_1 = eq(io.opcode, UInt<4>("h0f")) @[Control.scala 33:26]
      node _T_2 = eq(io.opcode, UInt<5>("h017")) @[Control.scala 33:58]
      node _T_3 = or(_T_1, _T_2) @[Control.scala 33:44]
      node _T_4 = eq(io.opcode, UInt<5>("h01b")) @[Control.scala 33:90]
      node _T_5 = or(_T_3, _T_4) @[Control.scala 33:76]
      node _T_6 = eq(io.opcode, UInt<6>("h03b")) @[Control.scala 33:122]
      node _T_7 = or(_T_5, _T_6) @[Control.scala 33:108]
      node _T_8 = eq(io.opcode, UInt<7>("h073")) @[Control.scala 33:154]
      node _T_9 = or(_T_7, _T_8) @[Control.scala 33:140]
      when _T_9 : @[Control.scala 33:172]
        io.MemWrite <= UInt<1>("h00") @[Control.scala 34:21]
        io.Branch <= UInt<1>("h00") @[Control.scala 35:19]
        io.MemRead <= UInt<1>("h00") @[Control.scala 36:20]
        io.RegWrite <= UInt<1>("h00") @[Control.scala 37:21]
        io.MemToReg <= UInt<1>("h00") @[Control.scala 38:21]
        io.ALU_op <= UInt<3>("h07") @[Control.scala 39:19]
        io.operand_A_sel <= UInt<1>("h00") @[Control.scala 40:26]
        io.operand_B_sel <= UInt<1>("h00") @[Control.scala 41:26]
        io.Extend_sel <= UInt<1>("h00") @[Control.scala 42:23]
        io.Next_PC_select <= UInt<1>("h00") @[Control.scala 43:27]
        skip @[Control.scala 33:172]
      else : @[Control.scala 46:42]
        node _T_10 = eq(io.opcode, UInt<5>("h013")) @[Control.scala 46:25]
        when _T_10 : @[Control.scala 46:42]
          io.MemWrite <= UInt<1>("h00") @[Control.scala 47:21]
          io.Branch <= UInt<1>("h00") @[Control.scala 48:19]
          io.MemRead <= UInt<1>("h00") @[Control.scala 49:20]
          io.RegWrite <= UInt<1>("h01") @[Control.scala 50:21]
          io.MemToReg <= UInt<1>("h00") @[Control.scala 51:21]
          io.ALU_op <= UInt<1>("h01") @[Control.scala 52:19]
          io.operand_A_sel <= UInt<1>("h00") @[Control.scala 53:26]
          io.operand_B_sel <= UInt<1>("h01") @[Control.scala 54:26]
          io.Extend_sel <= UInt<1>("h00") @[Control.scala 55:23]
          io.Next_PC_select <= UInt<1>("h00") @[Control.scala 56:27]
          skip @[Control.scala 46:42]
        else : @[Control.scala 58:42]
          node _T_11 = eq(io.opcode, UInt<6>("h023")) @[Control.scala 58:25]
          when _T_11 : @[Control.scala 58:42]
            io.MemWrite <= UInt<1>("h01") @[Control.scala 59:21]
            io.Branch <= UInt<1>("h00") @[Control.scala 60:19]
            io.MemRead <= UInt<1>("h00") @[Control.scala 61:20]
            io.RegWrite <= UInt<1>("h00") @[Control.scala 62:21]
            io.MemToReg <= UInt<1>("h00") @[Control.scala 63:21]
            io.ALU_op <= UInt<3>("h05") @[Control.scala 64:19]
            io.operand_A_sel <= UInt<1>("h00") @[Control.scala 65:26]
            io.operand_B_sel <= UInt<1>("h01") @[Control.scala 66:26]
            io.Extend_sel <= UInt<2>("h02") @[Control.scala 67:23]
            io.Next_PC_select <= UInt<1>("h00") @[Control.scala 68:27]
            skip @[Control.scala 58:42]
          else : @[Control.scala 70:42]
            node _T_12 = eq(io.opcode, UInt<6>("h033")) @[Control.scala 70:25]
            when _T_12 : @[Control.scala 70:42]
              io.MemWrite <= UInt<1>("h00") @[Control.scala 71:21]
              io.Branch <= UInt<1>("h00") @[Control.scala 72:19]
              io.MemRead <= UInt<1>("h00") @[Control.scala 73:20]
              io.RegWrite <= UInt<1>("h01") @[Control.scala 74:21]
              io.MemToReg <= UInt<1>("h00") @[Control.scala 75:21]
              io.ALU_op <= UInt<1>("h00") @[Control.scala 76:19]
              io.operand_A_sel <= UInt<1>("h00") @[Control.scala 77:26]
              io.operand_B_sel <= UInt<1>("h00") @[Control.scala 78:26]
              io.Extend_sel <= UInt<1>("h00") @[Control.scala 79:23]
              io.Next_PC_select <= UInt<1>("h00") @[Control.scala 80:27]
              skip @[Control.scala 70:42]
            else : @[Control.scala 82:42]
              node _T_13 = eq(io.opcode, UInt<6>("h037")) @[Control.scala 82:25]
              when _T_13 : @[Control.scala 82:42]
                io.MemWrite <= UInt<1>("h00") @[Control.scala 83:21]
                io.Branch <= UInt<1>("h00") @[Control.scala 84:19]
                io.MemRead <= UInt<1>("h00") @[Control.scala 86:20]
                io.RegWrite <= UInt<1>("h01") @[Control.scala 87:21]
                io.MemToReg <= UInt<1>("h00") @[Control.scala 88:21]
                io.ALU_op <= UInt<3>("h06") @[Control.scala 89:19]
                io.operand_A_sel <= UInt<2>("h03") @[Control.scala 90:26]
                io.operand_B_sel <= UInt<1>("h01") @[Control.scala 91:26]
                io.Extend_sel <= UInt<1>("h01") @[Control.scala 93:23]
                io.Next_PC_select <= UInt<1>("h00") @[Control.scala 95:27]
                skip @[Control.scala 82:42]
              else : @[Control.scala 97:42]
                node _T_14 = eq(io.opcode, UInt<7>("h063")) @[Control.scala 97:25]
                when _T_14 : @[Control.scala 97:42]
                  io.MemWrite <= UInt<1>("h00") @[Control.scala 98:21]
                  io.Branch <= UInt<1>("h01") @[Control.scala 99:19]
                  io.MemRead <= UInt<1>("h00") @[Control.scala 100:20]
                  io.RegWrite <= UInt<1>("h00") @[Control.scala 101:21]
                  io.MemToReg <= UInt<1>("h00") @[Control.scala 102:21]
                  io.ALU_op <= UInt<2>("h02") @[Control.scala 103:19]
                  io.operand_A_sel <= UInt<1>("h00") @[Control.scala 104:26]
                  io.operand_B_sel <= UInt<1>("h00") @[Control.scala 105:26]
                  io.Extend_sel <= UInt<1>("h00") @[Control.scala 106:23]
                  io.Next_PC_select <= UInt<1>("h01") @[Control.scala 107:27]
                  skip @[Control.scala 97:42]
                else : @[Control.scala 109:42]
                  node _T_15 = eq(io.opcode, UInt<7>("h067")) @[Control.scala 109:25]
                  when _T_15 : @[Control.scala 109:42]
                    io.MemWrite <= UInt<1>("h00") @[Control.scala 110:21]
                    io.Branch <= UInt<1>("h00") @[Control.scala 111:19]
                    io.MemRead <= UInt<1>("h00") @[Control.scala 112:20]
                    io.RegWrite <= UInt<1>("h01") @[Control.scala 113:21]
                    io.MemToReg <= UInt<1>("h00") @[Control.scala 114:21]
                    io.ALU_op <= UInt<2>("h03") @[Control.scala 115:19]
                    io.operand_A_sel <= UInt<2>("h02") @[Control.scala 116:26]
                    io.operand_B_sel <= UInt<1>("h00") @[Control.scala 117:26]
                    io.Extend_sel <= UInt<1>("h00") @[Control.scala 118:23]
                    io.Next_PC_select <= UInt<2>("h03") @[Control.scala 119:27]
                    skip @[Control.scala 109:42]
                  else : @[Control.scala 121:42]
                    node _T_16 = eq(io.opcode, UInt<7>("h06f")) @[Control.scala 121:25]
                    when _T_16 : @[Control.scala 121:42]
                      io.MemWrite <= UInt<1>("h00") @[Control.scala 122:21]
                      io.Branch <= UInt<1>("h00") @[Control.scala 123:19]
                      io.MemRead <= UInt<1>("h00") @[Control.scala 124:20]
                      io.RegWrite <= UInt<1>("h01") @[Control.scala 125:21]
                      io.MemToReg <= UInt<1>("h00") @[Control.scala 126:21]
                      io.ALU_op <= UInt<2>("h03") @[Control.scala 127:19]
                      io.operand_A_sel <= UInt<2>("h02") @[Control.scala 128:26]
                      io.operand_B_sel <= UInt<1>("h00") @[Control.scala 129:26]
                      io.Extend_sel <= UInt<1>("h00") @[Control.scala 130:23]
                      io.Next_PC_select <= UInt<2>("h02") @[Control.scala 131:27]
                      skip @[Control.scala 121:42]
                    else : @[Control.scala 133:15]
                      io.MemWrite is invalid @[Control.scala 134:21]
                      io.Branch is invalid @[Control.scala 135:19]
                      io.MemRead is invalid @[Control.scala 136:20]
                      io.RegWrite is invalid @[Control.scala 137:21]
                      io.MemToReg is invalid @[Control.scala 138:21]
                      io.ALU_op is invalid @[Control.scala 139:19]
                      io.operand_A_sel is invalid @[Control.scala 140:26]
                      io.operand_B_sel is invalid @[Control.scala 141:26]
                      io.Extend_sel is invalid @[Control.scala 142:23]
                      io.Next_PC_select is invalid @[Control.scala 143:27]
                      skip @[Control.scala 133:15]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<5>, out : SInt<32>, branch : UInt<1>}
    
    node _out_T = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 48:19]
    node _out_T_1 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 48:44]
    node _out_T_2 = or(_out_T, _out_T_1) @[ALU.scala 48:31]
    node _out_T_3 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 48:70]
    node _out_T_4 = or(_out_T_2, _out_T_3) @[ALU.scala 48:57]
    node _out_T_5 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 48:94]
    node _out_T_6 = or(_out_T_4, _out_T_5) @[ALU.scala 48:81]
    node _out_T_7 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 48:118]
    node _out_T_8 = or(_out_T_6, _out_T_7) @[ALU.scala 48:105]
    node _out_T_9 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 48:143]
    node _out_T_10 = or(_out_T_8, _out_T_9) @[ALU.scala 48:130]
    node _out_T_11 = add(io.in_A, io.in_B) @[ALU.scala 48:167]
    node _out_T_12 = tail(_out_T_11, 1) @[ALU.scala 48:167]
    node _out_T_13 = asSInt(_out_T_12) @[ALU.scala 48:167]
    node _out_T_14 = eq(io.alu_Op, UInt<5>("h01")) @[ALU.scala 49:19]
    node _out_T_15 = eq(io.alu_Op, UInt<5>("h01")) @[ALU.scala 49:44]
    node _out_T_16 = or(_out_T_14, _out_T_15) @[ALU.scala 49:31]
    node _out_T_17 = asUInt(io.in_A) @[ALU.scala 49:67]
    node _out_T_18 = bits(io.in_B, 18, 0) @[ALU.scala 49:84]
    node _out_T_19 = dshl(_out_T_17, _out_T_18) @[ALU.scala 49:74]
    node _out_T_20 = asSInt(_out_T_19) @[ALU.scala 49:100]
    node _out_T_21 = eq(io.alu_Op, UInt<5>("h02")) @[ALU.scala 50:19]
    node _out_T_22 = eq(io.alu_Op, UInt<5>("h02")) @[ALU.scala 50:44]
    node _out_T_23 = or(_out_T_21, _out_T_22) @[ALU.scala 50:31]
    node _out_T_24 = lt(io.in_A, io.in_B) @[ALU.scala 50:70]
    node _out_T_25 = mux(_out_T_24, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 50:61]
    node _out_T_26 = eq(io.alu_Op, UInt<5>("h03")) @[ALU.scala 51:19]
    node _out_T_27 = eq(io.alu_Op, UInt<5>("h03")) @[ALU.scala 51:45]
    node _out_T_28 = or(_out_T_26, _out_T_27) @[ALU.scala 51:32]
    node _out_T_29 = lt(io.in_A, io.in_B) @[ALU.scala 51:72]
    node _out_T_30 = mux(_out_T_29, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 51:63]
    node _out_T_31 = eq(io.alu_Op, UInt<5>("h04")) @[ALU.scala 52:19]
    node _out_T_32 = eq(io.alu_Op, UInt<5>("h04")) @[ALU.scala 52:44]
    node _out_T_33 = or(_out_T_31, _out_T_32) @[ALU.scala 52:31]
    node _out_T_34 = xor(io.in_A, io.in_B) @[ALU.scala 52:67]
    node _out_T_35 = asSInt(_out_T_34) @[ALU.scala 52:67]
    node _out_T_36 = eq(io.alu_Op, UInt<5>("h05")) @[ALU.scala 53:19]
    node _out_T_37 = eq(io.alu_Op, UInt<5>("h05")) @[ALU.scala 53:44]
    node _out_T_38 = or(_out_T_36, _out_T_37) @[ALU.scala 53:31]
    node _out_T_39 = asUInt(io.in_A) @[ALU.scala 53:67]
    node _out_T_40 = bits(io.in_B, 18, 0) @[ALU.scala 53:84]
    node _out_T_41 = dshr(_out_T_39, _out_T_40) @[ALU.scala 53:74]
    node _out_T_42 = asSInt(_out_T_41) @[ALU.scala 53:100]
    node _out_T_43 = eq(io.alu_Op, UInt<5>("h06")) @[ALU.scala 54:19]
    node _out_T_44 = eq(io.alu_Op, UInt<5>("h06")) @[ALU.scala 54:43]
    node _out_T_45 = or(_out_T_43, _out_T_44) @[ALU.scala 54:30]
    node _out_T_46 = or(io.in_A, io.in_B) @[ALU.scala 54:65]
    node _out_T_47 = asSInt(_out_T_46) @[ALU.scala 54:65]
    node _out_T_48 = eq(io.alu_Op, UInt<5>("h07")) @[ALU.scala 55:19]
    node _out_T_49 = eq(io.alu_Op, UInt<5>("h07")) @[ALU.scala 55:44]
    node _out_T_50 = or(_out_T_48, _out_T_49) @[ALU.scala 55:31]
    node _out_T_51 = and(io.in_A, io.in_B) @[ALU.scala 55:67]
    node _out_T_52 = asSInt(_out_T_51) @[ALU.scala 55:67]
    node _out_T_53 = eq(io.alu_Op, UInt<5>("h08")) @[ALU.scala 56:19]
    node _out_T_54 = sub(io.in_A, io.in_B) @[ALU.scala 56:41]
    node _out_T_55 = tail(_out_T_54, 1) @[ALU.scala 56:41]
    node _out_T_56 = asSInt(_out_T_55) @[ALU.scala 56:41]
    node _out_T_57 = eq(io.alu_Op, UInt<5>("h0d")) @[ALU.scala 57:19]
    node _out_T_58 = eq(io.alu_Op, UInt<5>("h0d")) @[ALU.scala 57:44]
    node _out_T_59 = or(_out_T_57, _out_T_58) @[ALU.scala 57:31]
    node _out_T_60 = asUInt(io.in_A) @[ALU.scala 57:67]
    node _out_T_61 = bits(io.in_B, 18, 0) @[ALU.scala 57:84]
    node _out_T_62 = dshr(_out_T_60, _out_T_61) @[ALU.scala 57:74]
    node _out_T_63 = asSInt(_out_T_62) @[ALU.scala 57:100]
    node _out_T_64 = eq(io.alu_Op, UInt<5>("h01f")) @[ALU.scala 58:19]
    node _out_T_65 = eq(io.alu_Op, UInt<5>("h01f")) @[ALU.scala 58:44]
    node _out_T_66 = or(_out_T_64, _out_T_65) @[ALU.scala 58:31]
    node _out_T_67 = mux(_out_T_66, io.in_A, asSInt(UInt<1>("h00"))) @[ALU.scala 58:8]
    node _out_T_68 = mux(_out_T_59, _out_T_63, _out_T_67) @[ALU.scala 57:8]
    node _out_T_69 = mux(_out_T_53, _out_T_56, _out_T_68) @[ALU.scala 56:8]
    node _out_T_70 = mux(_out_T_50, _out_T_52, _out_T_69) @[ALU.scala 55:8]
    node _out_T_71 = mux(_out_T_45, _out_T_47, _out_T_70) @[ALU.scala 54:8]
    node _out_T_72 = mux(_out_T_38, _out_T_42, _out_T_71) @[ALU.scala 53:8]
    node _out_T_73 = mux(_out_T_33, _out_T_35, _out_T_72) @[ALU.scala 52:8]
    node _out_T_74 = mux(_out_T_28, _out_T_30, _out_T_73) @[ALU.scala 51:8]
    node _out_T_75 = mux(_out_T_23, _out_T_25, _out_T_74) @[ALU.scala 50:8]
    node _out_T_76 = mux(_out_T_16, _out_T_20, _out_T_75) @[ALU.scala 49:8]
    node out = mux(_out_T_10, _out_T_13, _out_T_76) @[ALU.scala 48:8]
    io.out <= out @[ALU.scala 60:8]
    node fnct3 = bits(io.alu_Op, 2, 0) @[ALU.scala 61:26]
    node _T = bits(io.alu_Op, 4, 3) @[ALU.scala 62:19]
    node _T_1 = eq(_T, UInt<2>("h02")) @[ALU.scala 62:25]
    when _T_1 : @[ALU.scala 62:37]
      node _T_2 = eq(fnct3, UInt<1>("h00")) @[ALU.scala 64:22]
      when _T_2 : @[ALU.scala 64:32]
        node _io_branch_T = eq(io.in_A, io.in_B) @[ALU.scala 65:34]
        io.branch <= _io_branch_T @[ALU.scala 65:23]
        skip @[ALU.scala 64:32]
      else : @[ALU.scala 67:38]
        node _T_3 = eq(fnct3, UInt<1>("h01")) @[ALU.scala 67:28]
        when _T_3 : @[ALU.scala 67:38]
          node _io_branch_T_1 = neq(io.in_A, io.in_B) @[ALU.scala 68:34]
          io.branch <= _io_branch_T_1 @[ALU.scala 68:23]
          skip @[ALU.scala 67:38]
        else : @[ALU.scala 70:38]
          node _T_4 = eq(fnct3, UInt<3>("h04")) @[ALU.scala 70:28]
          when _T_4 : @[ALU.scala 70:38]
            node _io_branch_T_2 = lt(io.in_A, io.in_B) @[ALU.scala 71:34]
            io.branch <= _io_branch_T_2 @[ALU.scala 71:23]
            skip @[ALU.scala 70:38]
          else : @[ALU.scala 73:38]
            node _T_5 = eq(fnct3, UInt<3>("h05")) @[ALU.scala 73:28]
            when _T_5 : @[ALU.scala 73:38]
              node _io_branch_T_3 = geq(io.in_A, io.in_B) @[ALU.scala 74:34]
              io.branch <= _io_branch_T_3 @[ALU.scala 74:23]
              skip @[ALU.scala 73:38]
            else : @[ALU.scala 76:38]
              node _T_6 = eq(fnct3, UInt<3>("h07")) @[ALU.scala 76:28]
              when _T_6 : @[ALU.scala 76:38]
                node _io_branch_T_4 = geq(io.in_A, io.in_B) @[ALU.scala 77:35]
                io.branch <= _io_branch_T_4 @[ALU.scala 77:23]
                skip @[ALU.scala 76:38]
              else : @[ALU.scala 79:38]
                node _T_7 = eq(fnct3, UInt<3>("h06")) @[ALU.scala 79:28]
                when _T_7 : @[ALU.scala 79:38]
                  node _io_branch_T_5 = leq(io.in_A, io.in_B) @[ALU.scala 80:35]
                  io.branch <= _io_branch_T_5 @[ALU.scala 80:23]
                  skip @[ALU.scala 79:38]
                else : @[ALU.scala 81:20]
                  io.branch <= UInt<1>("h00") @[ALU.scala 82:23]
                  skip @[ALU.scala 81:20]
      skip @[ALU.scala 62:37]
    else : @[ALU.scala 85:16]
      io.branch is invalid @[ALU.scala 86:19]
      skip @[ALU.scala 85:16]
    
  module ALU_Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip ALU_op : UInt<3>, flip func3 : UInt<3>, flip func7 : UInt<1>, out : UInt<5>}
    
    io.out <= UInt<1>("h00") @[ALU_Control.scala 13:12]
    node _T = eq(io.ALU_op, UInt<1>("h00")) @[ALU_Control.scala 14:20]
    when _T : @[ALU_Control.scala 14:33]
      node io_out_hi = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
      node _io_out_T = cat(io_out_hi, io.func3) @[Cat.scala 30:58]
      io.out <= _io_out_T @[ALU_Control.scala 15:16]
      skip @[ALU_Control.scala 14:33]
    else : @[ALU_Control.scala 16:39]
      node _T_1 = eq(io.ALU_op, UInt<1>("h01")) @[ALU_Control.scala 16:26]
      when _T_1 : @[ALU_Control.scala 16:39]
        node io_out_hi_1 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 30:58]
        node _io_out_T_1 = cat(io_out_hi_1, io.func3) @[Cat.scala 30:58]
        io.out <= _io_out_T_1 @[ALU_Control.scala 17:16]
        skip @[ALU_Control.scala 16:39]
      else : @[ALU_Control.scala 18:39]
        node _T_2 = eq(io.ALU_op, UInt<3>("h05")) @[ALU_Control.scala 18:26]
        when _T_2 : @[ALU_Control.scala 18:39]
          io.out <= UInt<1>("h00") @[ALU_Control.scala 19:16]
          skip @[ALU_Control.scala 18:39]
        else : @[ALU_Control.scala 20:39]
          node _T_3 = eq(io.ALU_op, UInt<2>("h02")) @[ALU_Control.scala 20:26]
          when _T_3 : @[ALU_Control.scala 20:39]
            node _io_out_T_2 = cat(UInt<2>("h02"), io.func3) @[Cat.scala 30:58]
            io.out <= _io_out_T_2 @[ALU_Control.scala 21:16]
            skip @[ALU_Control.scala 20:39]
          else : @[ALU_Control.scala 22:39]
            node _T_4 = eq(io.ALU_op, UInt<3>("h06")) @[ALU_Control.scala 22:26]
            when _T_4 : @[ALU_Control.scala 22:39]
              io.out <= UInt<1>("h00") @[ALU_Control.scala 23:16]
              skip @[ALU_Control.scala 22:39]
            else : @[ALU_Control.scala 24:39]
              node _T_5 = eq(io.ALU_op, UInt<2>("h03")) @[ALU_Control.scala 24:26]
              when _T_5 : @[ALU_Control.scala 24:39]
                io.out <= UInt<5>("h01f") @[ALU_Control.scala 25:16]
                skip @[ALU_Control.scala 24:39]
              else : @[ALU_Control.scala 26:39]
                node _T_6 = eq(io.ALU_op, UInt<3>("h04")) @[ALU_Control.scala 26:26]
                when _T_6 : @[ALU_Control.scala 26:39]
                  io.out <= UInt<1>("h00") @[ALU_Control.scala 27:16]
                  skip @[ALU_Control.scala 26:39]
                else : @[ALU_Control.scala 28:39]
                  node _T_7 = eq(io.ALU_op, UInt<3>("h07")) @[ALU_Control.scala 28:26]
                  when _T_7 : @[ALU_Control.scala 28:39]
                    io.out <= UInt<1>("h00") @[ALU_Control.scala 29:16]
                    skip @[ALU_Control.scala 28:39]
                  else : @[ALU_Control.scala 30:16]
                    io.out is invalid @[ALU_Control.scala 31:16]
                    skip @[ALU_Control.scala 30:16]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<2>}
    
    inst PC of PC @[Top.scala 14:20]
    PC.clock <= clock
    PC.reset <= reset
    inst PC4 of PC4 @[Top.scala 15:21]
    PC4.clock <= clock
    PC4.reset <= reset
    inst RegFile of RegisterFile @[Top.scala 16:25]
    RegFile.clock <= clock
    RegFile.reset <= reset
    inst InsMem of InstructionMemory @[Top.scala 17:24]
    InsMem.clock <= clock
    InsMem.reset <= reset
    inst ImmeGen of ImmdValGen @[Top.scala 18:25]
    ImmeGen.clock <= clock
    ImmeGen.reset <= reset
    inst DataMem of DataMemory @[Top.scala 19:25]
    DataMem.clock <= clock
    DataMem.reset <= reset
    inst Control of Control @[Top.scala 20:25]
    Control.clock <= clock
    Control.reset <= reset
    inst ALU of ALU @[Top.scala 21:21]
    ALU.clock <= clock
    ALU.reset <= reset
    inst ALU_Control of ALU_Control @[Top.scala 22:29]
    ALU_Control.clock <= clock
    ALU_Control.reset <= reset
    io.out <= PC.io.out @[Top.scala 25:12]
    node _PC_io_in_T = and(Control.io.Branch, ALU.io.branch) @[Top.scala 30:55]
    node _PC_io_in_T_1 = mux(_PC_io_in_T, ImmeGen.io.immd_se, PC4.io.out) @[Top.scala 30:35]
    node _PC_io_in_T_2 = asUInt(RegFile.io.ReadData1) @[Top.scala 32:76]
    node _PC_io_in_T_3 = add(ImmeGen.io.immd_se, _PC_io_in_T_2) @[Top.scala 32:53]
    node _PC_io_in_T_4 = tail(_PC_io_in_T_3, 1) @[Top.scala 32:53]
    node _PC_io_in_T_5 = and(_PC_io_in_T_4, UInt<32>("h0fffffffe")) @[Top.scala 32:84]
    node _PC_io_in_T_6 = eq(UInt<1>("h01"), Control.io.Next_PC_select) @[Mux.scala 80:60]
    node _PC_io_in_T_7 = mux(_PC_io_in_T_6, _PC_io_in_T_1, PC4.io.out) @[Mux.scala 80:57]
    node _PC_io_in_T_8 = eq(UInt<2>("h02"), Control.io.Next_PC_select) @[Mux.scala 80:60]
    node _PC_io_in_T_9 = mux(_PC_io_in_T_8, ImmeGen.io.immd_se, _PC_io_in_T_7) @[Mux.scala 80:57]
    node _PC_io_in_T_10 = eq(UInt<2>("h03"), Control.io.Next_PC_select) @[Mux.scala 80:60]
    node _PC_io_in_T_11 = mux(_PC_io_in_T_10, _PC_io_in_T_5, _PC_io_in_T_9) @[Mux.scala 80:57]
    PC.io.in <= _PC_io_in_T_11 @[Top.scala 28:14]
    PC4.io.pc <= PC.io.out @[Top.scala 34:15]
    ImmeGen.io.instr <= InsMem.io.data @[Top.scala 37:22]
    ImmeGen.io.PC <= PC.io.out @[Top.scala 38:19]
    node _InsMem_io_address_T = bits(PC.io.out, 11, 2) @[Top.scala 41:35]
    InsMem.io.address <= _InsMem_io_address_T @[Top.scala 41:23]
    node _Control_io_opcode_T = bits(InsMem.io.data, 6, 0) @[Top.scala 44:40]
    Control.io.opcode <= _Control_io_opcode_T @[Top.scala 44:23]
    node _ALU_Control_io_func3_T = bits(InsMem.io.data, 14, 12) @[Top.scala 47:43]
    ALU_Control.io.func3 <= _ALU_Control_io_func3_T @[Top.scala 47:26]
    node _ALU_Control_io_func7_T = bits(InsMem.io.data, 30, 30) @[Top.scala 48:43]
    ALU_Control.io.func7 <= _ALU_Control_io_func7_T @[Top.scala 48:26]
    ALU_Control.io.ALU_op <= Control.io.ALU_op @[Top.scala 49:27]
    RegFile.io.RegWrite <= Control.io.RegWrite @[Top.scala 52:25]
    node _RegFile_io_ReadReg1_T = bits(InsMem.io.data, 19, 15) @[Top.scala 53:42]
    RegFile.io.ReadReg1 <= _RegFile_io_ReadReg1_T @[Top.scala 53:25]
    node _RegFile_io_ReadReg2_T = bits(InsMem.io.data, 24, 20) @[Top.scala 54:42]
    RegFile.io.ReadReg2 <= _RegFile_io_ReadReg2_T @[Top.scala 54:25]
    node _RegFile_io_WriteReg_T = bits(InsMem.io.data, 11, 7) @[Top.scala 55:42]
    RegFile.io.WriteReg <= _RegFile_io_WriteReg_T @[Top.scala 55:25]
    node _RegFile_io_WriteData_T = mux(Control.io.MemToReg, DataMem.io.outputData, ALU.io.out) @[Top.scala 56:32]
    RegFile.io.WriteData <= _RegFile_io_WriteData_T @[Top.scala 56:26]
    ALU.io.alu_Op <= ALU_Control.io.out @[Top.scala 59:19]
    node _ALU_io_in_A_T = asSInt(PC4.io.out) @[Top.scala 62:43]
    node _ALU_io_in_A_T_1 = asSInt(PC.io.out) @[Top.scala 63:42]
    node _ALU_io_in_A_T_2 = eq(UInt<1>("h01"), Control.io.operand_A_sel) @[Mux.scala 80:60]
    node _ALU_io_in_A_T_3 = mux(_ALU_io_in_A_T_2, _ALU_io_in_A_T, RegFile.io.ReadData1) @[Mux.scala 80:57]
    node _ALU_io_in_A_T_4 = eq(UInt<2>("h02"), Control.io.operand_A_sel) @[Mux.scala 80:60]
    node _ALU_io_in_A_T_5 = mux(_ALU_io_in_A_T_4, _ALU_io_in_A_T_1, _ALU_io_in_A_T_3) @[Mux.scala 80:57]
    node _ALU_io_in_A_T_6 = eq(UInt<2>("h03"), Control.io.operand_A_sel) @[Mux.scala 80:60]
    node _ALU_io_in_A_T_7 = mux(_ALU_io_in_A_T_6, RegFile.io.ReadData1, _ALU_io_in_A_T_5) @[Mux.scala 80:57]
    ALU.io.in_A <= _ALU_io_in_A_T_7 @[Top.scala 60:17]
    node _ALU_io_in_B_T = asSInt(ImmeGen.io.immd_se) @[Top.scala 66:70]
    node _ALU_io_in_B_T_1 = mux(Control.io.operand_B_sel, _ALU_io_in_B_T, RegFile.io.ReadData2) @[Top.scala 66:23]
    ALU.io.in_B <= _ALU_io_in_B_T_1 @[Top.scala 66:17]
    node _DataMem_io_address_T = bits(ALU.io.out, 9, 2) @[Top.scala 69:38]
    DataMem.io.address <= _DataMem_io_address_T @[Top.scala 69:24]
    DataMem.io.data <= RegFile.io.ReadData2 @[Top.scala 70:21]
    DataMem.io.write <= Control.io.MemWrite @[Top.scala 71:22]
    DataMem.io.read <= Control.io.MemRead @[Top.scala 72:21]
    
